{"version":3,"sources":["serviceWorker.js","components/GradeInput.jsx","components/GradeTags.jsx","components/PercentSelectors.jsx","components/AssignmentNameInput.jsx","components/CardWithTable.jsx","components/FinalCalc.jsx","index.js"],"names":["Boolean","window","location","hostname","match","GradeInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","setState","isFocused","handleBlur","state","value","undefined","_this2","react_default","a","createElement","input_number","assign","onChange","handleChange","onBlur","autoFocus","formatter","concat","parser","string","replace","onClick","Component","colorDict","A","B","C","D","F","invalid percentage","GradeTags","_this$props","percentage","placement","prettyPercentage","Math","round","style","display","paddingLeft","tooltip","title","tag","color","RadioButton","Radio","Button","PercentSelectors","aPercentages","key","letter","bPercentages","cPercentages","dPercentages","fPercentages","arr","_this3","aRadio","map","renderRadio","bRadio","cRadio","dRadio","fRadio","popover","content","AssignmentNameInput","defaultValue","event","target","input","width","Option","Select","inputStyle","marginTop","alignSelf","cardStyle","margin","marginBottom","FinalCalc","toggleDrawer","drawerVisible","reset","isAuto","alert","es_alert","message","visibility","gradeWanted","updateFinalWeight","updateMPCount","toggleAuto","_this$state","calculateFinal","toggleFullYear","inputs","length","handleViewChange","view","finalWeight","_this$state2","mpCount","i","weight","_this$state3","newInputs","thisInput","_unused","push","updateGradeWanted","updateMP","v","_this$state4","finalGrade","total","filter","startsWith","reduce","b","type","showIcon","inputss","gpa","weightDict","AP","dualenrollment","honors","regular","percentToGPA","100","98","94","92","90","86","84","82","76","74","72","66","64","initInputs","_this$state5","_this$state6","output","Fragment","icon","flexDirection","shouldDisplay","max","min","disabled","k","paddingTop","height","paddingRight","components_GradeTags","components_PercentSelectors","float","borderTop","textAlign","justifyContent","es_button","card","es_select","FinalCalc_Option","drawer","closable","onClose","visible","marginLeft","trunc","mountNode","document","getElementById","ReactDOM","render","components_FinalCalc","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.14974507.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { InputNumber } from 'antd';\r\n\r\n\r\nclass GradeInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        isFocused: false,\r\n        value: this.props.value\r\n    };\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState( { isFocused: true } );\r\n  }\r\n\r\n  handleBlur = () => {\r\n    this.setState( { isFocused: false } );\r\n  }\r\n\r\n  handleChange(value) {\r\n    if (value === undefined){\r\n      value = 0;\r\n    }\r\n    this.setState({ value });\r\n  }\r\n\r\n  render() {\r\n    let { value } = this.props;\r\n    // console.log(`Value: ${value}`)\r\n\r\n    if (!this.state.isFocused){\r\n      return (\r\n      <div>\r\n        <span onClick={ this.handleClick }>{ value }</span>\r\n    </div>\r\n      )}\r\n    return (\r\n      <div>\r\n        <InputNumber\r\n          value={ value }\r\n          onChange={value => this.props.handleChange(value)}\r\n          onBlur={ this.handleBlur }\r\n          autoFocus\r\n          formatter={value => `${value}`}\r\n          parser={string => string.replace(/\\D+/g, '')}\r\n          { ...this.props } />\r\n    </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default GradeInput;\r\n","import React, { Component } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Tag, Tooltip } from 'antd';\r\n\r\nconst colorDict = {\r\n  \"A\": \"green\",\r\n  \"B\": \"lime\",\r\n  \"C\": \"gold\",\r\n  \"D\": \"volcano\",\r\n  \"F\": \"red\",\r\n  \"invalid percentage\": \"geekblue\",\r\n}\r\n\r\nclass GradeTags extends Component {\r\n  state = {};\r\n  render() {\r\n    let A = 93 - 1;\r\n    let B = 85 - 1;\r\n    let C = 76 - 1;\r\n    let D = 66 - 1;\r\n    let F = 0;\r\n\r\n    let value;\r\n\r\n    let { percentage, placement } = this.props;\r\n    let prettyPercentage = `${Math.round(percentage)}%`;\r\n\r\n    if (percentage > A){\r\n      value = \"A\";\r\n    } else if (percentage > B){\r\n      value = \"B\";\r\n    } else if (percentage > C){\r\n      value = \"C\";\r\n    } else if (percentage > D){\r\n      value = \"D\";\r\n    } else if (percentage >= F){\r\n      value = \"F\";\r\n    } else {\r\n      value = \"invalid percentage\";\r\n    }\r\n\r\n    return (\r\n      <div style={{display: 'inline-block', paddingLeft: '5%'}}>\r\n        <Tooltip title={ value } placement={ placement || \"top\" }>\r\n          <Tag color={ colorDict[value] }>{ prettyPercentage }</Tag>\r\n        </Tooltip>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default GradeTags;\r\n","import React, { Component } from 'react';\r\nimport { Tag, Popover, Radio } from 'antd';\r\n\r\nconst RadioButton = Radio.Button;\r\n\r\nclass PercentSelectors extends Component {\r\n  state = {\r\n    aPercentages: [{key: 99, letter: \"A+\"}, {key: 95, letter: \"A\"}, {key: 93, letter: \"A-\"}],\r\n    bPercentages: [{key: 91, letter: \"B+\"}, {key: 87, letter: \"B\"}, {key: 85, letter: \"B-\"}],\r\n    cPercentages: [{key: 83, letter: \"C+\"}, {key: 77, letter: \"C\"}, {key: 75, letter: \"C-\"}],\r\n    dPercentages: [{key: 73, letter: \"D+\"}, {key: 67, letter: \"D\"}, {key: 65, letter: \"D-\"}],\r\n    fPercentages: [{key: 64, letter: \"F\"}],\r\n  };\r\n\r\n  renderRadio(arr) {\r\n    return (\r\n      <RadioButton\r\n        value={arr.key}\r\n        onClick={() => this.props.handleClick(arr.key)}\r\n        key={arr.key} >{arr.key}%</RadioButton>\r\n    )\r\n  }\r\n\r\n  render() {\r\n    let aRadio = this.state.aPercentages.map(arr => this.renderRadio(arr))\r\n    let bRadio = this.state.bPercentages.map(arr => this.renderRadio(arr))\r\n    let cRadio = this.state.cPercentages.map(arr => this.renderRadio(arr))\r\n    let dRadio = this.state.dPercentages.map(arr => this.renderRadio(arr))\r\n    let fRadio = this.state.fPercentages.map(arr => this.renderRadio(arr))\r\n    return (\r\n      <div style={ this.props.style }>\r\n        <Popover placement=\"bottom\" content={aRadio}>\r\n          <Tag color='green'>A</Tag>\r\n        </Popover>\r\n        <Popover placement=\"bottom\" content={bRadio}>\r\n          <Tag color='lime'>B</Tag>\r\n        </Popover>\r\n        <Popover placement=\"bottom\" content={cRadio}>\r\n          <Tag color='gold'>C</Tag>\r\n        </Popover>\r\n        <Popover placement=\"bottom\" content={dRadio}>\r\n          <Tag color='volcano'>D</Tag>\r\n        </Popover>\r\n        <Popover placement=\"bottom\" content={fRadio}>\r\n          <Tag color='red'>F</Tag>\r\n        </Popover>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default PercentSelectors;\r\n","import React, { Component } from 'react';\r\nimport { Input } from 'antd';\r\n\r\nclass AssignmentNameInput extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        isFocused: false,\r\n        value: this.props.defaultValue,\r\n    };\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.setState( { isFocused: true } )\r\n  }\r\n\r\n  handleBlur = () => {\r\n    let value = this.state.value ? this.state.value : this.props.defaultValue;\r\n    if (value === \"\"){\r\n      value = this.props.defaultValue;\r\n    }\r\n    this.setState( { isFocused: false, value } )\r\n  }\r\n\r\n  handleChange(event) {\r\n    let { value } = event.target;\r\n    this.setState({ value });\r\n  }\r\n\r\n  reset() {\r\n    this.setState({ value: this.props.defaultValue })\r\n  }\r\n\r\n  render() {\r\n    let { value } = this.state\r\n    // console.log(`Value: ${value}`)\r\n    if (!this.state.isFocused){\r\n      return (\r\n        <div>\r\n          <span style={{ width: \"100%\" }} onClick={ this.handleClick }>{ value }</span>\r\n        </div>\r\n      )}\r\n    return (\r\n      <div>\r\n        <Input\r\n          value={ value }\r\n          onChange={ event => this.handleChange(event) }\r\n          onBlur={ () => this.handleBlur(value) }\r\n          autoFocus\r\n          { ...this.props } />\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default AssignmentNameInput;\r\n","import React, { Component } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Input, InputNumber, Table, Card, Select, Button, message } from 'antd';\r\nimport GradeInput from './GradeInput'\r\nimport GradeTags from './GradeTags'\r\nimport PercentSelectors from './PercentSelectors'\r\nimport AssignmentNameInput from './AssignmentNameInput'\r\n\r\nconst Option = Select.Option;\r\n\r\n// TODO: select option for weight\r\n// TODO: persistent name changes\r\n// TODO: points possible handle change\r\n\r\nclass CardWithTable extends Component {\r\n  state = {\r\n    mpData: [{'assignment': 'Dhmo Petition',\r\n      'key': 'zi3CHdkW2g',\r\n      'pointsEarned': 10.0,\r\n      'pointsPossible': 10.0},\r\n     {'assignment': 'Retest Ch 2',\r\n      'key': 'Nj3ByuUPZx',\r\n      'pointsEarned': 12.0,\r\n      'pointsPossible': 0.0},\r\n     {'assignment': 'Illustrated Poem',\r\n      'key': 'D2p8ElRvBj',\r\n      'pointsEarned': 15.0,\r\n      'pointsPossible': 15.0},\r\n     {'assignment': 'Ch 2 Exam - Measurements',\r\n      'key': 'Ps6LJi2Efi',\r\n      'pointsEarned': 86.0,\r\n      'pointsPossible': 100.0},\r\n     {'assignment': 'Organizing Data Activity',\r\n      'key': 'VwmfAArxPn',\r\n      'pointsEarned': 30.0,\r\n      'pointsPossible': 30.0},\r\n     {'assignment': 'Article Critique 3',\r\n      'key': 'D82jyod3Z6',\r\n      'pointsEarned': 10.0,\r\n      'pointsPossible': 10.0},\r\n     {'assignment': 'Intro To Chem Retest',\r\n      'key': 'H4ezXuUswS',\r\n      'pointsEarned': 12.0,\r\n      'pointsPossible': 0.0},\r\n     {'assignment': 'Article Critique 2',\r\n      'key': 'EuEDIBA7D4',\r\n      'pointsEarned': 10.0,\r\n      'pointsPossible': 10.0},\r\n     {'assignment': 'Dhmo Acrostic',\r\n      'key': 'EUTsCHU6Cl',\r\n      'pointsEarned': 10.0,\r\n      'pointsPossible': 10.0},\r\n     {'assignment': 'Dhmo Facts And Inferences',\r\n      'key': 'C01K8dbXPE',\r\n      'pointsEarned': 10.0,\r\n      'pointsPossible': 10.0},\r\n     {'assignment': 'Observation Experiment Lab',\r\n      'key': '9ralG0gWzS',\r\n      'pointsEarned': 34.0,\r\n      'pointsPossible': 36.0},\r\n     {'assignment': 'Intro To Chem Exam',\r\n      'key': '5koYPIJD1m',\r\n      'pointsEarned': 82.0,\r\n      'pointsPossible': 95.0},\r\n     {'assignment': 'Autobiography Of An Elements',\r\n      'key': '3rpkVWhGKQ',\r\n      'pointsEarned': 30.0,\r\n      'pointsPossible': 30.0},\r\n     {'assignment': 'Article Critique 1',\r\n      'key': 'xWL4dSBDlr',\r\n      'pointsEarned': 10.0,\r\n      'pointsPossible': 10.0},\r\n     {'assignment': 'Lab Safety Exam',\r\n      'key': 'tGRCxUoO0n',\r\n      'pointsEarned': 125.0,\r\n      'pointsPossible': 134.0},\r\n     {'assignment': 'Textbook Activity',\r\n      'key': 'IzYJ2tMUI2',\r\n      'pointsEarned': 23.0,\r\n      'pointsPossible': 25.0}\r\n    ],\r\n    mpColumns: [{\r\n        title: 'Assignment',\r\n        dataIndex: 'assignment',\r\n        key: 'assignment',\r\n        render: (text, record) => (\r\n          <div>\r\n          <AssignmentNameInput\r\n            defaultValue={record.assignment}\r\n          /><GradeTags percentage={(record.pointsEarned/record.pointsPossible)*100} />\r\n        </div>\r\n        )\r\n      }, {\r\n        title: 'Points Earned',\r\n        dataIndex: 'pointsEarned',\r\n        key: 'pointsEarned',\r\n        render: (text, record) => (\r\n            <GradeInput\r\n              style={{  }}\r\n              pointsPossible={record.pointsPossible}\r\n              defaultValue={record.pointsEarned}\r\n              max={Math.max(record.pointsPossible, record.pointsEarned)}\r\n              onChange={value => {\r\n                let thisData = this.state.mpData.filter(x => x.key === record.key)[0];\r\n\r\n                let max = Math.max(record.pointsPossible, record.pointsEarned);\r\n                if (value === undefined){\r\n                  value = 0;\r\n                } else if (value > max){\r\n                  value = max;\r\n                }\r\n\r\n                thisData.pointsEarned = value;\r\n                this.setState({ mpData: thisData&&this.state.mpData })\r\n              }}\r\n              value={record.pointsEarned}\r\n              min={0}\r\n            />\r\n        )\r\n      }, {\r\n        title: 'Points Possible',\r\n        dataIndex: 'pointsPossible',\r\n        key: 'pointsPossible',\r\n        render: (text, record) => (\r\n          <GradeInput value={record.pointsPossible} defaultValue={record.pointsPossible} min={record.pointsPossible} max={record.pointsPossible} />\r\n        )\r\n      }, ],\r\n\r\n    gpaColumns: [{\r\n        title: 'Class',\r\n        dataIndex: 'className',\r\n        key: 'className',\r\n        render: (text, record) => (\r\n          <div>\r\n          <AssignmentNameInput\r\n            defaultValue={record.className}\r\n          />\r\n        </div>\r\n        )\r\n      },\r\n      {\r\n        title: 'Weight',\r\n        dataIndex: 'weight',\r\n        key: 'weight',\r\n        render: (text, record) => (\r\n          <AssignmentNameInput\r\n            defaultValue={record.weight}\r\n          />\r\n        )\r\n      },\r\n      {\r\n        title: 'Credits',\r\n        dataIndex: 'credits',\r\n        key: 'credits',\r\n        render: (text, record) => (\r\n          <GradeInput\r\n            value={record.credits}\r\n            min={0}\r\n            max={3}\r\n            step={.5}\r\n            onChange={value => {\r\n              let thisData = this.state.gpaData.filter(x => x.key === record.key)[0];\r\n\r\n              let max = 3;\r\n              let min = 0;\r\n\r\n              if (value === undefined || value < min){\r\n                value = min;\r\n              } else if (value > max){\r\n                value = max;\r\n              }\r\n\r\n              thisData.credits = value;\r\n              this.setState({ gpaData: thisData&&this.state.gpaData });\r\n              this.updateGPA();\r\n            }}\r\n          />\r\n        )\r\n      },\r\n      {\r\n        title: 'Grade',\r\n        dataIndex: 'grade',\r\n        key: 'grade',\r\n        render: (text, record) => (\r\n          <GradeInput\r\n            value={record.grade}\r\n            min={0}\r\n            max={100}\r\n            onChange={value => {\r\n              let thisData = this.state.gpaData.filter(x => x.key === record.key)[0];\r\n\r\n              let max = 100;\r\n              let min = 0;\r\n\r\n              if (value === undefined || value < min){\r\n                value = min;\r\n              } else if (value > max){\r\n                value = max;\r\n              }\r\n\r\n              thisData.grade = value;\r\n              this.setState({ gpaData: thisData&&this.state.gpaData });\r\n              this.updateGPA();\r\n            }}\r\n          />\r\n        )\r\n      },\r\n    ],\r\n    gpaData: [\r\n      {\r\n        key: '1',\r\n        className: 'AP Calculus II',\r\n        weight: 'AP',\r\n        credits: 1,\r\n        grade: 95,\r\n      },\r\n      {\r\n        key: '2',\r\n        className: 'Honors Spanish IV',\r\n        weight: 'honors',\r\n        credits: 1,\r\n        grade: 95,\r\n      },\r\n      {\r\n        key: '3',\r\n        className: 'CIS 105',\r\n        weight: 'dualenrollment',\r\n        credits: 1,\r\n        grade: 95,\r\n      },\r\n      {\r\n        key: '4',\r\n        className: 'Freshman Biology',\r\n        weight: 'regular',\r\n        credits: 1.5,\r\n        grade: 99,\r\n      },\r\n    ],\r\n    gpa: 0,\r\n\r\n    gradeWanted: 100,\r\n    view: 'mp',\r\n\r\n    weightDict: {\r\n      'AP': .5,\r\n      'dualenrollment': .25,\r\n      'honors': .25,\r\n      'regular': 0,\r\n    },\r\n    percentToGPA: {\r\n      // use the maximum per range\r\n      100: 4,   // A+ 99-100\r\n      98: 4,    // A  95-98\r\n      94: 3.67, // A- 93-94\r\n      92: 3.33, // B+ 91-92\r\n      90: 3,    // B  87-90\r\n      86: 2.67, // B- 85-85\r\n      // does not recieve honors weight past this point\r\n      84: 2.33, // C+ 83-84\r\n      82: 2,    // C  77-82\r\n      76: 1.67, // C- 75-76\r\n      74: 1.33, // D+ 73-74\r\n      72: 1,    // D  67-72\r\n      66: .67,  // D- 65-66\r\n      64: 0,    // F  0-64\r\n    }\r\n  };\r\n\r\n  average(arr) {\r\n    return arr.reduce((a, b) => a + b, 0)/arr.length;\r\n  }\r\n\r\n  handleViewChange = view => {\r\n    this.setState({ view })\r\n  }\r\n\r\n  handleWantedChange = gradeWanted => {\r\n    this.setState({ gradeWanted })\r\n  }\r\n\r\n  handleMPClassChange = () => {\r\n    console.log(\"MP class changed. Nothing happened (for now).\")\r\n  }\r\n\r\n  calculateMPGrade = () => {\r\n    this.removeDiff()\r\n    let { mpData, gradeWanted } = this.state;\r\n    gradeWanted -= .5;\r\n    console.log(gradeWanted)\r\n    let diff_entry = mpData.filter(x => x['key'] === 'diff')\r\n\r\n    let pointsEarned = mpData.reduce((total, item) => total + item['pointsEarned'], 0);\r\n    let pointsPossible = mpData.reduce((total, item) => total + item['pointsPossible'], 0);\r\n    let diff = 0;\r\n\r\n    if ((pointsEarned/pointsPossible)*100 >= gradeWanted){\r\n      message.success('You already have your desired grade :)');\r\n      return '';\r\n    }\r\n\r\n    while ((pointsEarned/pointsPossible)*100 < gradeWanted){\r\n      pointsEarned++;\r\n      pointsPossible++;\r\n      diff += 1\r\n      if (diff >= 100){\r\n        let percentage = ((pointsEarned/pointsPossible)*100).toPrecision(3);\r\n        message.error(`Got to ${percentage}% with 100 points.`)\r\n        break\r\n      }\r\n    }\r\n\r\n    if (diff_entry.length > 0) {\r\n      mpData[0] = {\r\n        key: 'diff',\r\n        assignment: `Points needed to get ${gradeWanted}`,\r\n        pointsEarned: diff,\r\n        pointsPossible: diff,\r\n      }\r\n    } else {\r\n      mpData.unshift({\r\n        key: 'diff',\r\n        assignment: `Points needed to get ${gradeWanted}`,\r\n        pointsEarned: diff,\r\n        pointsPossible: diff,\r\n      })\r\n    }\r\n    this.setState({ mpData })\r\n  }\r\n\r\n  updateGPA = () => {\r\n    let gpa = this.calculateGPA();\r\n    this.setState({ gpa });\r\n  }\r\n\r\n  calculateGPA = () => {\r\n    let { gpaData, weightDict, percentToGPA } = this.state;\r\n\r\n    let totalCredits = 0;\r\n    let totalPoints = 0;\r\n\r\n    for(let i=0; i<gpaData.length; i++){\r\n      let { grade, credits, weight } = gpaData[i];\r\n        weight = weightDict[weight];\r\n        for(let [key, value] of Object.entries(percentToGPA)){\r\n          key = parseInt(key)\r\n          if (grade <= key){\r\n            grade = value;\r\n            if (key > 84){\r\n              grade += weight;\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        grade *= credits;\r\n        totalPoints += grade;\r\n        totalCredits += credits;\r\n    }\r\n    let gpa = (totalPoints/totalCredits).toPrecision(3);\r\n    return gpa;\r\n  }\r\n\r\n  removeDiff = () => {\r\n    let { mpData } = this.state;\r\n    mpData = mpData.filter(arr => arr.key !== 'diff')\r\n    this.setState({ mpData })\r\n  }\r\n\r\n  handleRadioClick = value => {\r\n    console.log(value)\r\n    this.setState({ gradeWanted: value })\r\n  }\r\n\r\n  render() {\r\n    let { view, mpData, mpColumns, gpaData, gpaColumns } = this.state;\r\n    let pointsEarned = mpData.reduce((total, item) => total + item['pointsEarned'], 0);\r\n    let pointsPossible = mpData.reduce((total, item) => total + item['pointsPossible'], 0);\r\n    let percentage = (pointsEarned/pointsPossible)*100;\r\n    let gpa = this.calculateGPA();\r\n\r\n    let data, columns, calculate, output;\r\n    switch (view){\r\n      case 'mp':\r\n        data = mpData;\r\n        columns = mpColumns;\r\n        calculate = this.calculateMPGrade;\r\n        output = (\r\n          <React.Fragment>\r\n            <div>\r\n              <Input\r\n                readOnly\r\n                style={{ display:'inlineBlock', width: '75%' }}\r\n                value={ `Total Points:  ${pointsEarned} / ${pointsPossible}` }\r\n              />\r\n              <GradeTags percentage={ percentage } />\r\n            </div>\r\n            <div style={{ paddingTop: \"3%\" }}>\r\n              <span style={{ paddingRight: \"5%\" }}>I want</span>\r\n              <InputNumber\r\n                formatter={value => `${value}%`}\r\n                value={this.state.gradeWanted}\r\n                max={100}\r\n                min={0}\r\n                parser={string => string.replace(/[^\\d\\.]+/g, '')}\r\n                onChange={gradeWanted => this.handleWantedChange(gradeWanted) }\r\n              />\r\n              <Button\r\n                style={{ float: \"right\" }}\r\n                type=\"primary\"\r\n                onClick={ calculate }>Calculate</Button>\r\n              <Button\r\n                style={{ float: \"right\" }}\r\n                type=\"secondary\"\r\n                onClick={ this.removeDiff }>Clear</Button>\r\n            </div>\r\n            <PercentSelectors handleClick={this.handleRadioClick} />\r\n          </React.Fragment>\r\n        )\r\n        break;\r\n\r\n      case 'gpa':\r\n        data = gpaData;\r\n        columns = gpaColumns;\r\n        calculate = this.calculateGPA;\r\n        output =  <span style={{ fontSize: '3em' }}>{ gpa }</span>\r\n        break;\r\n\r\n      default:\r\n        data = mpData;\r\n        columns = mpColumns;\r\n        calculate = this.calculateMPGrade;\r\n        break;\r\n    }\r\n    console.log(data)\r\n    return (\r\n      <div>\r\n        <Card\r\n          title={\r\n            <Select defaultValue=\"mp\" style={{ width: 140 }} onChange={this.handleViewChange}>\r\n              <Option value=\"mp\">MP Calc</Option>\r\n              <Option value=\"gpa\">GPA Calc</Option>\r\n              <Option value=\"final\">Final Calc</Option>\r\n            </Select>\r\n        }\r\n          extra={\r\n            <Select defaultValue=\"AP Calculus II\" style={{ width: 140 }} onChange={this.handleMPClassChange}>\r\n              <Option value=\"class1\">Honors Calculus I</Option>\r\n              <Option value=\"class2\">AP U.S. History</Option>\r\n              <Option value=\"class3\">You're MOm</Option>\r\n            </Select>\r\n          }\r\n          style={{\r\n              width: '350px',\r\n              marginLeft: 'auto',\r\n              marginRight: 'auto',\r\n              marginTop: '1%',\r\n              marginBottom: '1%',\r\n            }}\r\n        >\r\n        { output }\r\n\r\n        </Card>\r\n\r\n        <Table\r\n          style={{\r\n            width: '70%',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n          }}\r\n          columns={ columns }\r\n          pagination={ false }\r\n          dataSource={ data }\r\n        />\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default CardWithTable;\r\n","import React, { Component } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Alert, Drawer, Icon, InputNumber, Card, Select, Button, message } from 'antd';\r\nimport GradeTags from './GradeTags'\r\nimport PercentSelectors from './PercentSelectors'\r\nimport AssignmentNameInput from './AssignmentNameInput'\r\n\r\nconst Option = Select.Option;\r\n\r\nconst inputStyle = {\r\n  width: `${100/3}%`,\r\n  display: \"inline-block\",\r\n  marginTop: \"3%\",\r\n  alignSelf: \"center\",\r\n}\r\n\r\nconst cardStyle = {\r\n    width: '350px',\r\n    margin: \"auto\",\r\n    marginTop: \"10vh\",\r\n    marginBottom: \"10vh\",\r\n}\r\n\r\nclass FinalCalc extends Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    let finalWeight = .1\r\n\r\n    this.state = {\r\n      gpa: 0,\r\n      isAuto: true, // as opposed to manual\r\n\r\n      drawerVisible: false,\r\n\r\n      alert: <Alert message=\"x\" style={{visibility: \"hidden\"}}/>,\r\n\r\n      gradeWanted: 95,\r\n      view: 'mp',\r\n\r\n      finalWeight: finalWeight,\r\n      mpCount: 4,\r\n\r\n      inputs: [],\r\n\r\n      weightDict: {\r\n        'AP': .5,\r\n        'dualenrollment': .25,\r\n        'honors': .25,\r\n        'regular': 0,\r\n      },\r\n\r\n      percentToGPA: {\r\n        // use the maximum per range\r\n        100: 4,   // A+ 99-100\r\n        98: 4,    // A  95-98\r\n        94: 3.67, // A- 93-94\r\n        92: 3.33, // B+ 91-92\r\n        90: 3,    // B  87-90\r\n        86: 2.67, // B- 85-85\r\n        // does not recieve honors weight past this point\r\n        84: 2.33, // C+ 83-84\r\n        82: 2,    // C  77-82\r\n        76: 1.67, // C- 75-76\r\n        74: 1.33, // D+ 73-74\r\n        72: 1,    // D  67-72\r\n        66: .67,  // D- 65-66\r\n        64: 0,    // F  0-64\r\n      }\r\n    };\r\n    this.initInputs();\r\n  }\r\n\r\n  toggleDrawer = () => {\r\n    this.setState({ drawerVisible: !this.state.drawerVisible });\r\n  };\r\n\r\n  initInputs() {\r\n    let { finalWeight, mpCount } = this.state;\r\n    let inputs = [];\r\n    for(let i=0; i < mpCount; i++){\r\n      inputs.push({\r\n          'title': `MP ${i+1}`,\r\n          'value': 0,\r\n          'weight': (1-finalWeight)/mpCount,\r\n      })\r\n    }\r\n\r\n    inputs.push({\r\n      'title': 'Final',\r\n      'value': 0,\r\n      'weight': finalWeight,\r\n    })\r\n    this.state.inputs = inputs;\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      isAuto: true,\r\n      alert: <Alert message=\"x\" style={{visibility: \"hidden\"}}/>,\r\n      gradeWanted: 95,\r\n    })\r\n    this.updateFinalWeight(10)\r\n    this.updateMPCount(4)\r\n  }\r\n\r\n  toggleAuto = () => {\r\n    let { isAuto, gradeWanted } = this.state;\r\n    this.setState({ isAuto: !isAuto });\r\n    if (!isAuto) {\r\n      this.calculateFinal(gradeWanted);\r\n    }\r\n  }\r\n\r\n  toggleFullYear = () => {\r\n    let { inputs } = this.state;\r\n    if (inputs.length > 3) {\r\n      this.updateMPCount(2)\r\n    } else {\r\n      this.updateMPCount(4)\r\n    }\r\n  }\r\n\r\n  handleViewChange = view => {\r\n    this.setState({ view });\r\n  }\r\n\r\n  updateFinalWeight = (finalWeight) => {\r\n    let { inputs, mpCount } = this.state;\r\n    finalWeight /= 100;\r\n    inputs.map(i => {\r\n      if (i.title === \"Final\") {\r\n        i.weight = finalWeight;\r\n      } else {\r\n        i.weight = (1-finalWeight)/mpCount;\r\n      }\r\n      return i;\r\n    })\r\n    this.setState({ finalWeight, inputs })\r\n  }\r\n\r\n  updateMPCount = (mpCount) => {\r\n    let { finalWeight, inputs } = this.state;\r\n    let newInputs = [];\r\n    let value;\r\n    for(let i=0; i < mpCount; i++){\r\n      let thisInput = inputs[i];\r\n      try {\r\n        value = thisInput.title === \"Final\" ? 0 : thisInput.value || 0;\r\n      } catch {\r\n        value = 0;\r\n      }\r\n      newInputs.push({\r\n          'title': `MP ${i+1}`,\r\n          'value': value,\r\n          'weight': (1-finalWeight)/mpCount,\r\n      })\r\n    }\r\n\r\n    newInputs.push({\r\n      'title': 'Final',\r\n      'value': 0,\r\n      'weight': finalWeight,\r\n    })\r\n\r\n    // inputs.map(i => {\r\n    //   if (i.title !== \"Final\") {\r\n    //     i.weight = (1-finalWeight)/mpCount;\r\n    //   }\r\n    //   return i;\r\n    // })\r\n\r\n    this.setState({ inputs: newInputs, mpCount })\r\n  }\r\n\r\n  updateGradeWanted = gradeWanted => {\r\n    this.setState({ gradeWanted });\r\n    this.calculateFinal(gradeWanted);\r\n  }\r\n\r\n  updateMP = (v, title) => {\r\n    v = v || 0; // v ||= 0;\r\n    let inputs = this.state.inputs.map(i => {\r\n      if (i.title === title){\r\n        i.value = v;\r\n      }\r\n      return i;\r\n    })\r\n    this.setState({ inputs });\r\n    if (this.state.isAuto) {\r\n      this.calculateFinal(this.state.gradeWanted);\r\n    }\r\n  }\r\n\r\n  calculateFinal = (gradeWanted) => {\r\n    let { inputs, isAuto, finalWeight } = this.state;\r\n    if (isAuto) {\r\n      let finalGrade;\r\n      let total = inputs.filter(i => !i.title.startsWith(\"Final\")&&i.weight).map(i => i.value*i.weight).reduce((a, b) => a+b);\r\n\r\n      // console.log(\"Total: \", total);\r\n      // console.log(\"Grade Wanted: \", gradeWanted-.5);\r\n\t\t\tfor (let i=0; i*finalWeight+total<=gradeWanted-.5; i++) {\r\n        if (i > 101){\r\n          break;\r\n        }\r\n  \t\t\tfinalGrade = i;\r\n  \t\t}\r\n      // console.log(\"Final grade: \", finalGrade);\r\n\r\n      if (finalGrade > 100) {\r\n        this.setState({ alert: <Alert message=\"Desired grade is unachievable.\" type=\"error\" showIcon/> })\r\n        finalGrade = 100;\r\n      } else if (finalGrade <= 0 || !finalGrade) {\r\n        finalGrade = 0;\r\n        this.setState({ alert: <Alert message=\"You don't even need to take a final!\" type=\"info\" /> })\r\n      } else {\r\n        this.setState({ alert: <Alert message=\"x\" type=\"info\" style={{visibility: \"hidden\"}}/> })\r\n      }\r\n\r\n      let inputss = inputs.map(i => {\r\n        if (i.title === \"Final\"){\r\n          i.value = finalGrade;\r\n        }\r\n        return i;\r\n      })\r\n      this.setState({ inputs:inputss })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let { alert, inputs, isAuto, gradeWanted, finalWeight } = this.state;\r\n\r\n    let percentage = Math.round(inputs.map(i => i.value*i.weight).reduce((a, b) => a+b))\r\n\r\n    if (!isAuto) {\r\n      alert = <Alert message=\"x\" type=\"info\" style={{visibility: \"hidden\"}}/>\r\n    }\r\n\r\n    let output = (\r\n      <React.Fragment>\r\n        <h2>Calculate your final grade  <Icon type=\"question-circle-o\" onClick={this.toggleDrawer}/></h2>\r\n\r\n        { alert }\r\n        <div style={{ display: \"flex\", flexDirection: \"column\"}}>\r\n          { inputs.map(i => {\r\n            let shouldDisplay = \"visible\"\r\n            if (i.title === \"Final\" && !this.state.finalWeight){\r\n              shouldDisplay = \"hidden\"\r\n            }\r\n\r\n            return (\r\n              <div style={{  alignSelf: \"center\", visibility: shouldDisplay }}>\r\n                <div style={{ width: `${100/3}%`, display:\"inline-block\" }}>\r\n                  {i.title}\r\n                </div>\r\n                <InputNumber\r\n                  formatter={ string => string === \"0\" ? '' : string }\r\n                  style={ inputStyle }\r\n                  key={ i.title }\r\n                  title={ i.title }\r\n                  max={ 100 }\r\n                  min={ 0 }\r\n                  disabled={ i.title.startsWith(\"Final\")&&isAuto }\r\n                  value={ inputs.filter(k => k.title === i.title)[0].value }\r\n                  parser={string => string.replace(/[^\\d\\.]+/g, '')}\r\n                  onChange={v => this.updateMP(v, i.title) }\r\n                />\r\n              </div>\r\n            )\r\n          }) }\r\n        </div>\r\n        <div style={{ paddingTop: \"3%\", height: \"40px\", visibility: isAuto ? \"visible\" : \"hidden\" }}>\r\n            <span style={{ paddingRight: \"0%\" }}>I want</span>\r\n            <GradeTags percentage={ gradeWanted } placement={ \"right\" } />\r\n            <PercentSelectors style={{ display: \"inline-block\", float: \"right\" }} handleClick={ this.updateGradeWanted } />\r\n        </div>\r\n        <div style={{ width: '100%', borderTop: \"1px solid gray\", textAlign: \"center\" }}>\r\n          <h1>{ percentage }%</h1>\r\n        </div>\r\n        <div style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n          <Button onClick={ this.toggleAuto }>{ isAuto ? \"Manual\" : \"Auto\" }</Button>\r\n          <Button onClick={ this.reset }>Reset</Button>\r\n          <Button onClick={ this.toggleFullYear }>{ inputs.length > 3 ? \"Semester\" : \"Full Year\" }</Button>\r\n          <Button onClick={ () => this.updateFinalWeight(finalWeight ? 0 : 10) }>{ finalWeight ? \"No Final\" : \"Final\" }</Button>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n\r\n    return (\r\n      <div>\r\n        <Card\r\n          title={\r\n            <Select defaultValue=\"mp\" style={{ width: 140 }} onChange={this.handleViewChange}>\r\n              <Option value=\"mp\">MP Calc</Option>\r\n              <Option value=\"gpa\">GPA Calc</Option>\r\n              <Option value=\"final\">Final Calc</Option>\r\n            </Select>\r\n        }\r\n          style={ cardStyle }\r\n        >\r\n        { output }\r\n\r\n        </Card>\r\n        <Drawer\r\n          title=\"Final Grade Calculator\"\r\n          placement=\"right\"\r\n          closable={false}\r\n          onClose={this.toggleDrawer}\r\n          visible={this.state.drawerVisible}\r\n        >\r\n          <p>A calculator to see what you need to get on your final to finish with the grade you want.</p>\r\n            <div>\r\n              <span>\r\n                Final Weight:\r\n              </span>\r\n              <InputNumber\r\n                style={{ width: `${100/3}%`, display: \"inline-block\", marginTop: \"3%\", marginLeft: \"3%\" }}\r\n                max={ 100 }\r\n                min={ 0 }\r\n                value={ Math.trunc(this.state.finalWeight*100) }\r\n                parser={string => string.replace(/[^\\d\\.]+/g, '')}\r\n                onChange={v => this.updateFinalWeight(v) }\r\n                />\r\n            </div>\r\n            <div>\r\n              <span>\r\n                MP Count:\r\n              </span>\r\n              <InputNumber\r\n                style={{ width: `${100/3}%`, display: \"inline-block\", marginTop: \"3%\", marginLeft: \"3%\" }}\r\n                max={ 10 }\r\n                min={ 1 }\r\n                value={ this.state.mpCount }\r\n                parser={string => string.replace(/[^\\d\\.]+/g, '')}\r\n                onChange={v => this.updateMPCount(v) }\r\n                />\r\n            </div>\r\n        </Drawer>\r\n      </div>\r\n    )\r\n  };\r\n}\r\n\r\nexport default FinalCalc;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport CardWithTable from './components/CardWithTable'\r\nimport FinalCalc from './components/FinalCalc'\r\n\r\nimport 'antd/dist/antd.css';\r\n\r\nconst mountNode = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n  <FinalCalc />,\r\n  mountNode\r\n);\r\n// ReactDOM.render(<GradeInput />, document.getElementById('root'));\r\n\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}